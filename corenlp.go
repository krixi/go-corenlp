package corenlp

import (
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/krixi/go-corenlp/document"
)

// Response is returned by some structs which implements Connector interface.
type Response io.ReadCloser

// Connector means the something to communicate with Stanford CoreNLP.
type Connector interface {
	Run(context.Context, string) (Response, error)
}

// Client is the type used to interact with the NLP server at the high level.
type Client struct {
	con Connector
}

// NewClient creates a new instance of the NLP client. Pass it an instance of the corenlp.HTTPClient or corenlp.LocalExec objects.
func NewClient(c Connector) *Client {
	return &Client{
		con: c,
	}
}

// Annotate annotate the text using a connector provided.
func (c *Client) Annotate(ctx context.Context, text string) (root *document.Document, err error) {
	response, err := c.con.Run(ctx, text)
	if err != nil {
		return nil, err
	}
	defer response.Close()

	rawjson, err := ioutil.ReadAll(response)
	if err != nil {
		return nil, err
	}
	return ParseOutput(rawjson)
}

// ParseOutput parse a json output generated by Stanford CoreNLP.
func ParseOutput(rawjson []byte) (root *document.Document, err error) {
	err = json.Unmarshal(rawjson, &root)
	return root, err
}
